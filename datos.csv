{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>poblacion</th>\n",
       "      <th>porcentaje</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>china</th>\n",
       "      <td>1439</td>\n",
       "      <td>18.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>india</th>\n",
       "      <td>1380</td>\n",
       "      <td>17.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Estados Unidos</th>\n",
       "      <td>331</td>\n",
       "      <td>4.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Indonesia</th>\n",
       "      <td>273</td>\n",
       "      <td>3.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pakistan</th>\n",
       "      <td>220</td>\n",
       "      <td>2.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brasil</th>\n",
       "      <td>212</td>\n",
       "      <td>2.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nigeria</th>\n",
       "      <td>206</td>\n",
       "      <td>2.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bangladesh</th>\n",
       "      <td>164</td>\n",
       "      <td>2.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rusia</th>\n",
       "      <td>145</td>\n",
       "      <td>1.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mexico</th>\n",
       "      <td>128</td>\n",
       "      <td>1.65</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                poblacion  porcentaje\n",
       "china                1439       18.47\n",
       "india                1380       17.70\n",
       "Estados Unidos        331        4.25\n",
       "Indonesia             273        3.51\n",
       "Pakistan              220        2.83\n",
       "Brasil                212        2.73\n",
       "Nigeria               206        2.64\n",
       "Bangladesh            164        2.11\n",
       "Rusia                 145        1.87\n",
       "Mexico                128        1.65"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "nombre_paises = [\"china\", \"india\", \"Estados Unidos\", \"Indonesia\", \"Pakistan\", \"Brasil\", \"Nigeria\", \"Bangladesh\", \"Rusia\", \"Mexico\"]\n",
    "                 \n",
    "encabezado = [\"poblacion\", \"porcentaje\" ]\n",
    "datos  = [[1439, 18.47],\n",
    "          [1380, 17.70],\n",
    "          [331, 4.25],\n",
    "          [273, 3.51],\n",
    "          [220, 2.83],\n",
    "          [212, 2.73],\n",
    "          [206, 2.64],\n",
    "          [164, 2.11],\n",
    "          [145, 1.87],\n",
    "          [128, 1.65]]\n",
    "paises = pd.DataFrame(datos, index=nombre_paises, columns=encabezado ) \n",
    "paises\n",
    "          "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>poblacion</th>\n",
       "      <th>porcentaje</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>China</th>\n",
       "      <td>1439.0</td>\n",
       "      <td>18.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>India</th>\n",
       "      <td>1380.0</td>\n",
       "      <td>17.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Estados Unidos</th>\n",
       "      <td>331.0</td>\n",
       "      <td>4.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Indonesia</th>\n",
       "      <td>273.0</td>\n",
       "      <td>3.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pakistan</th>\n",
       "      <td>220.0</td>\n",
       "      <td>2.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brasil</th>\n",
       "      <td>212.0</td>\n",
       "      <td>2.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nigeria</th>\n",
       "      <td>206.0</td>\n",
       "      <td>2.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bangladesh</th>\n",
       "      <td>164.0</td>\n",
       "      <td>2.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rusia</th>\n",
       "      <td>145.0</td>\n",
       "      <td>1.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mexico</th>\n",
       "      <td>128.0</td>\n",
       "      <td>1.65</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                poblacion  porcentaje\n",
       "China              1439.0       18.47\n",
       "India              1380.0       17.70\n",
       "Estados Unidos      331.0        4.25\n",
       "Indonesia           273.0        3.51\n",
       "Pakistan            220.0        2.83\n",
       "Brasil              212.0        2.73\n",
       "Nigeria             206.0        2.64\n",
       "Bangladesh          164.0        2.11\n",
       "Rusia               145.0        1.87\n",
       "Mexico              128.0        1.65"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datos = {\"China\": [1439, 18.47],\n",
    "         \"India\": [1380, 17.70],\n",
    "         \"Estados Unidos\": [331, 4.25],\n",
    "         \"Indonesia\": [273, 3.51],\n",
    "         \"Pakistan\": [220, 2.83],\n",
    "         \"Brasil\": [212, 2.73],\n",
    "         \"Nigeria\": [206, 2.64],\n",
    "         \"Bangladesh\": [164, 2.11],\n",
    "         \"Rusia\": [145, 1.87],\n",
    "         \"Mexico\": [128, 1.65]}\n",
    "paises = pd.DataFrame(datos, index=encabezado)\n",
    "paises = paises.T\n",
    "paises\n",
    "         "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "poblacion     float64\n",
       "porcentaje    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paises.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[1439.  ,   18.47],\n",
       "        [1380.  ,   17.7 ],\n",
       "        [ 331.  ,    4.25],\n",
       "        [ 273.  ,    3.51],\n",
       "        [ 220.  ,    2.83],\n",
       "        [ 212.  ,    2.73],\n",
       "        [ 206.  ,    2.64],\n",
       "        [ 164.  ,    2.11],\n",
       "        [ 145.  ,    1.87],\n",
       "        [ 128.  ,    1.65]]),\n",
       " 20)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paises.values, paises.size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(Index(['China', 'India', 'Estados Unidos', 'Indonesia', 'Pakistan', 'Brasil',\n",
       "        'Nigeria', 'Bangladesh', 'Rusia', 'Mexico'],\n",
       "       dtype='object'),\n",
       " Index(['poblacion', 'porcentaje'], dtype='object'))"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paises.index, paises.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>poblacion</th>\n",
       "      <th>porcentaje</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>China</th>\n",
       "      <td>1439.0</td>\n",
       "      <td>18.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>India</th>\n",
       "      <td>1380.0</td>\n",
       "      <td>17.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Estados Unidos</th>\n",
       "      <td>331.0</td>\n",
       "      <td>4.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Indonesia</th>\n",
       "      <td>273.0</td>\n",
       "      <td>3.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pakistan</th>\n",
       "      <td>220.0</td>\n",
       "      <td>2.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brasil</th>\n",
       "      <td>212.0</td>\n",
       "      <td>2.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nigeria</th>\n",
       "      <td>206.0</td>\n",
       "      <td>2.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bangladesh</th>\n",
       "      <td>164.0</td>\n",
       "      <td>2.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rusia</th>\n",
       "      <td>145.0</td>\n",
       "      <td>1.87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mexico</th>\n",
       "      <td>128.0</td>\n",
       "      <td>1.65</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                poblacion  porcentaje\n",
       "China              1439.0       18.47\n",
       "India              1380.0       17.70\n",
       "Estados Unidos      331.0        4.25\n",
       "Indonesia           273.0        3.51\n",
       "Pakistan            220.0        2.83\n",
       "Brasil              212.0        2.73\n",
       "Nigeria             206.0        2.64\n",
       "Bangladesh          164.0        2.11\n",
       "Rusia               145.0        1.87\n",
       "Mexico              128.0        1.65"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paises [[\"poblacion\", \"porcentaje\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "paises[\"poblacion\"] = paises[\"poblacion\"].astype(\"int\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 10 entries, China to Mexico\n",
      "Data columns (total 2 columns):\n",
      " #   Column      Non-Null Count  Dtype  \n",
      "---  ------      --------------  -----  \n",
      " 0   poblacion   10 non-null     int32  \n",
      " 1   porcentaje  10 non-null     float64\n",
      "dtypes: float64(1), int32(1)\n",
      "memory usage: 200.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "paises.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "paises.boxplot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.ylabel(\"paises\")\n",
    "plt.xlabel(\"porcentaje\")\n",
    "plt.scatter(paises[\"porcentaje\"], paises[\"poblacion\"], color=\"pink\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Interseccion (b) 0.006924920367128884\n",
      "pendiente (m) [0.01282587]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn import linear_model\n",
    "regresion = linear_model.LinearRegression()\n",
    "\n",
    "horas = paises[\"poblacion\"].values.reshape((-1, 1))\n",
    "\n",
    "modelo = regresion.fit(horas, paises[\"porcentaje\"])\n",
    "print(\"Interseccion (b)\", modelo.intercept_)\n",
    "print(\"pendiente (m)\", modelo.coef_)\n",
    "\n",
    "entrada = [[40899], [6086], [60304], [700980]]\n",
    "modelo.predict(entrada)\n",
    "\n",
    "plt.scatter(entrada, modelo.predict(entrada), color=\"red\")\n",
    "plt.plot(entrada, modelo.predict(entrada), color=\"black\")\n",
    "plt.ylabel(\"paises\")\n",
    "plt.xlabel(\"porcentaje\")\n",
    "plt.scatter(paises[\"porcentaje\"], paises[\"poblacion\"], color=\"pink\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
